#日付を扱うライブラリ
import datetime


#引数なし/戻り値なし
def ask_name():
    ask_name = input('名前を入力してください')
    #上の値を関数の外で扱うことができない


#引数なし/戻り値あり
def ask_age():
    while True:
        try:
            ask_age = input('年齢を入力してください')
            ask_age = int(ask_age)
            break
        except:
            print('正しい値を入力してください')
    #関数内の値(変数)を外に運ぶことができる
    return ask_age


#引数あり/戻り値あり
def get_dirth_year(age):
    #引数として値を受け取ることで計算を受け取った値に左右されず柔軟に対応できる
    #例えば、この関数は受け取った引数(年齢を想定しているためage)を元に生まれた年を計算する
    #ここで、何歳かを固定せずに引数として値を受け取ることで例えユーザーが何歳でも対処することができる
    #今年の年を取得
    this_year = datetime.date.today().year
    #上記ask_age()で帰ってきた年齢の値を元に生まれた年を計算
    birth_year = this_year - age
    #birth_yearを返す
    return birth_year




if __name__ == '__main__':
    name = ask_name()
    age = ask_age()
    birth_year = get_dirth_year(age)
    #戻り値で値を返していないため何も表示できない(None)
    print(name)
    #戻り値があるため値を表示することができる(入力した値が表示される)
    print(age)
    #
    print(birth_year)



#1. 引数なし/戻り値なしの関数はカプセル性を持たせる。
#   関数の中に値を入れることも出すこともできない。

#2. 引数ありの関数は柔軟性を持たせる。
#   値を受け取る形を取るため、規定の処理(ex.受け取った値を足し算する)を様々な値で実施することができる。

#3. 戻り値ありの関数は拡張性を持たせる。
#   関数内で処理した値を返すことで、その値を元にさらに関数に渡したりif文の条件式にしたりできる

#   注意点
#   上記でわかるように、関数は変数に代入しながら実行することができる。これは戻り値がある場合に変数で受け取る役割を担うため。
#   しかし、上記のprint()でnameがNoneになるように、戻り値がない場合は変数を用意してもそこに何も値が入らない(Noneは「値なし」の意)
#   引数には関数を指定することもできる